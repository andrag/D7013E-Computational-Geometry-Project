package algorithm;

import java.util.ArrayList;
import java.util.logging.Logger;

import javax.swing.text.Segment;

import datastructures.*;
import algorithm.*;

public class CollisionDetection extends ArrayList<Endpoint>{

	/**
	 * 
	 */
	private Logger log;
	private static final long serialVersionUID = 1L;
	private AVLTree eventQueue;
	//private StatusTree status;
	private StatusTreeSet status;
	private ArrayList<Endpoint> eventPoints;
	private ArrayList<Endpoint> allIntersections;
	
	private static int edgeID = 0;//For keeping track of all the edges

	//Papa's got a brand new bag
	//Guess these are replaced by arrays within the Endpoints themselves
	private ArrayList<Edge> intersectionLower = new java.util.ArrayList<Edge>();
	private ArrayList<Edge> intersectionInterior = new ArrayList<Edge>();

	private boolean intersecting = false;
	
	private static int sweep_y; //Idea. Use this to get hold of sweep_y from inside Edge and/or Endpoint. Important. Should not be modified from anywhere other than this class.

	public CollisionDetection(Endpoint startpoint1, Endpoint startpoint2){
		eventPoints = new ArrayList<Endpoint>();
		//Make an eventqueue BBST
		eventQueue = new AVLTree();
		//Build the eventqueue
		Endpoint current = startpoint1;
		allIntersections = new ArrayList<Endpoint>();
		
		//While next segment != startpoint.prev --> loop. This fails if two lines in a polygon are co-linear but they should not be.
		while(current.getNextSeg().getEnd()!=startpoint1){//
			eventQueue.insert(current);	//Kommenterade ut ovan eftersom det ger dubbel insättning. 
			//Detta funkar endast om eventpoints kan vara både upper och lower samtidigt.
			current = current.getNextSeg().getEnd();
		}
		eventQueue.insert(current);
		current = startpoint2;
		while(current.getNextSeg().getEnd()!=startpoint2){//
			eventQueue.insert(current);
			current = current.getNextSeg().getEnd();
		}
		eventQueue.insert(current);
		
		//For debugging
		System.out.println("is Root null?: "+ eventQueue.root==null);
		System.out.println("is Roots eventpoint null?: "+eventQueue.root==null);//Ger nullpointer. Noderna har ingen data.
		System.out.println("Now traverse the tree");
		eventQueue.traverseInOrder();
		System.out.println("Is the queue empty?");
		System.out.println(eventQueue.isEmpty());
		
		//SaveAndLoad.saveEventQueue(eventQueue);
		String savedQueue = "Log_2017_04_02_20-24-51.ser";
		eventQueue = SaveAndLoad.loadEventQueue(savedQueue);

		//Initialize the empty status structure
		//status = new StatusTree();//Statusen ska ordnas på ett annat sätt. Ska ordnas efter hur segmenten ligger i x-riktningen där sweeplinjen befinner sig.
		status = new StatusTreeSet();
		
		
		//Gör en insertfunktion i StatusTree som tar ett y-värde som parameter. Jämför de olika nodernas x-värden i detta y-värde. Typ räta linjen?
		while(eventQueue.root.left!=null || eventQueue.root.right!=null){//!eventQueue.isEmpty()
			System.out.println("==================================================\n\nWhile loop entered.");

			Endpoint next = eventQueue.findLargest(eventQueue.root);

			System.out.println("Deleting eventpoint p from queue. p: "+"("+next.getX()+", "+next.getRealY()+")");
			
			System.out.println("Traverse the event-tree");
			eventQueue.traverseInOrder();
			
			//Varning! Denna datastruktur är felkodad. Klarar inte att deleta roten. Nullpointer i sista steget. 
			eventQueue.delete(next);//Next är en endpoint som är null. Noden med största värde har null data av någon anledning.
			System.out.println("Calling handleEventPoint(p)");

			handleEventPoint(next);
		}
		System.out.println("There is only one event point left in the queue. Handle it now!");
		//pInOtherSegments(eventQueue.root.getEventpoint());
		handleLastPoint(eventQueue.root.getEventpoint());

	}
	
	/* TODO
	 * 
	 * 1. Make sure that status.remove(e) removes the correct edge. Does compareTo() in edge work as it should?
	 * 2. Check that status.add(e) adds a new segment in the correct place
	 * 3. Check that findLftmost and rightmost works as intended
	 * 4. Check that status.floor(e) and ceiling works as intended with edge.compareTo()
	 * 
	 */
	
	
	//2017-04-09
	public void handleEventPoint2(Endpoint p){
				//Om två punkter i två polygoner sammanstrålar här så händer följande:
					/* Polygon 1:s lower upptäcks. Föregående segment tas bort.
					 * Polygon 1:s upper gör att ett nytt segment sätts in - nu ska det upptäckasatt denna upper sammanstrålar med polygon 2:s punkt.
					 * Görs detta test?
					 */
				if(p.isLower){
					System.out.println("===============================Handle a lower eventpoint=============================");
					
					int count = 0;
					//Count how many lowers we need to delete
					for(Edge e : p.getLowerTo()){
						count++;
					}
					System.out.println("p is lower to "+count+" segments.");
					
					//At some point we try to delete a lower point with an upper that has never existed.
					for(Edge e : p.getLowerTo()){//Tries to delete all segments the lower point refers to but there is only one segment left in the tree
						System.out.println("Delete the segment with upper: ("+e.getUpper().getX()+", "+e.getUpper().getRealY()+")");
						System.out.println("\nAnd lower: ("+ p.getX()+ ", " +p.getRealY() + ")");
						status.remove(e);
					}
					//WE MUST ALSO DELETE THIS SEGMENT FROM THE LOWERTO ARRAY! THIS CAUSES PROBLEMS!
					p.getLowerTo().clear();
					System.out.println(count + "Segments were deleted due to the lower endpoint of: ("+p.getX()+", "+ p.getRealY()+ ")");
				}
				
				
				//Kolla nya punktens intersections endast då nya segment ska in i statusen, p är en upper.
				if(p.isUpper()){//Även en check mot intersections? Men inga intersections ska vara satta till upper.
					System.out.println("/n================================Upper inserted===================================/n/n");
					System.out.println("p: ("+p.getX()+","+p.getRealY()+") is an upper eventpoint. \nCheck if it intersects with any existing segment in the status.");
				
					//Used to be an out commented code part here for checking if a new upper is in the interior of an existing segment.
					//That should be spotted by find new event and doIntersect...Or is it?
					
					System.out.println("Is p upper to many segments?");
					if(p.getUpperTo().size()>1){//p is upper to several segments. Check if it's an intersection. Double check in case of p being an intersection eventpoint
						//Check belongings of the polygons. Do we have an intersection?
						
						System.out.println("Yes it is. Check belongings for collision point.");
						System.out.println("isUpperTo size är: "+p.getUpperTo().size());

						for(Edge e : p.getUpperTo()){//Should work
							System.out.println("Segment with same upper: ("+e.getUpper().getX()+", "+e.getUpper().getRealY()+"). Lower: ("+e.getLower().getX()+", "+e.getLower().getRealY()+")");
							System.out.println("Insert segment into status");
							//status.insert(e);//Dessa kan vara från olika polygoner. Kan kolla tillhörighet genom p.getNext om Edge blir tilldelad en tillhörighet.
							status.add(e);
							//intersectionInterior.add(e);//Varför detta?
							//How to report the edges involved? No need :)
							if(p.getBelonging() != e.getLower().getBelonging()){
								intersecting = true;//This will report this upper point as an intersection point. Don't do that again in findNewEvent below.
								System.out.println("We have a collision point.");
							}
							else System.out.println("No collisiion between this uppers segments. This case should only appear in the top point of a polygon if it is really simple :)");
						}

						//Find the leftmost and rightmost segments among the intersecting ones
						System.out.println("Hitta det vänstraste och högraste segmentet som utgår från p.");
						
						//Findleft/rightmost must be run to set left/rightmost in the Endpoint
						Edge left = p.findLeftmost();//Replaced by leftmost and rightmost inside Endpoints class
						Edge right = p.findRightmost();//Verkar funka
						//System.out.println("Leftmost is: ("+left.getLower().getX()+", "+left.getLower().getRealY()+")");
						//System.out.println("Rightmost is: ("+right.getLower().getX()+", "+right.getLower().getRealY()+")");
						//System.out.println("Now traverse the tree.");
						//status.traverseInOrder();

						//Find the left neighbour of the left segment
						//System.out.println("Hitta deras grannar.");
						//Edge leftNeighbour = status.findLeftNeighbour(p.leftmost, p.getRealY());//If left neighbour exists. Check this. And the same for right.
						Edge leftNeighbour = status.floor(p.leftmost);
						
						//System.out.println("Search for rightmost. Is rightmost null?");
						//System.out.println(p.rightmost==null);
						//Edge rightNeighbour = status.findRightNeihbour(p.rightmost, p.getRealY());
						Edge rightNeighbour = status.ceiling(p.rightmost);
						//System.out.println("Leftmost: ("+left.getLower().getX()+", "+left.getLower().getRealY()+")");
						
						//System.out.println("Rightmost:" + right.getLower().getX()+", "+right.getLower().getRealY()+")");

						//Kör findNewEvent på dessa
						//System.out.println("Kör findNewEvent på dessa.");
						findNewEvent(leftNeighbour, rightNeighbour, p, false);
						//findNewEvent(rightNeighbour, right, p, false);
					}
					else {
						//This is an upper point to just one segment
						System.out.println("No. Insert its only segment into the status.");
						System.out.println("Is its only segment null?");
						System.out.println(p.getUpperTo().get(0) == null);
						status.insert(p.getUpperTo().get(0));//p is only upper to one segment
						
						
						System.out.println("\n=====================================Traverse the status=============================\n");
						status.traverseInOrder();

						//System.out.println("The eventpoint is not intersecting with any segment in the status. Den är false :)");
						//Find left and right neighbours of p
						System.out.println("Find the neighbours of p:s segment to see if they intersect.");
						Edge leftNeighbour = status.findLeftNeighbour(p.getUpperTo().get(0), p.getRealY());//Hittar ingen vänstergranne :(
						Edge rightNeighbour = status.findRightNeihbour(p.getUpperTo().get(0), p.getRealY());
						System.out.println("Is there a left neighbour?");
						System.out.println(leftNeighbour);
						System.out.println("Is there a right neighbour?");
						System.out.println(rightNeighbour);

						//Throw them as arguments togehter with p to findNewEvent
						findNewEvent(leftNeighbour, rightNeighbour, p, false);//Detta är fel! Ska kolla leftneighbour mot segmentet och rightneighbour mot segmentet.
						//findNewEvent(p.getUpperTo().get(0), rightNeighbour, p, false);//Fixat med ett till kall.
					}


					//Fix newEvent

				}

				if(p.isIntersection){
					
					System.out.println("=====================This is an intersection eventpoint====================\n");
						
					intersecting = true;
					handleIntersectingSegments(p);
					
					//Don't think this is needed. Is it bad??
					p.isUpper = true;//Tvivelaktigt om deta behövs. Kan vara bra för insertion

					//findNewEvent must be run to set the leftmost and rightmost within the Edge object
					Edge left = p.findLeftmost();
					Edge right = p.findRightmost();

					Edge leftNeighbour = status.findLeftNeighbour(p.leftmost, p.getRealY());
					Edge rightNeighbour = status.findRightNeihbour(p.rightmost, p.getRealY());//Istället för right... Gör nog ingen skillnad.

					findNewEvent(leftNeighbour, rightNeighbour, p, false);
				}
				
				
				if(intersecting == true){//Feltänk här. Måste bygga på antal element som upper är upper till.
					System.out.println("p är en intersection point, är nu upper till mer än ett segment. Lägg till p i intersection-arrayen.");
					allIntersections.add(p);//This might already be added in findNewEvent!!!
					intersecting = false;
				}

				
				System.out.println("\n====================================Slut på handleEventPoint.==========================================");
			}
			
	

	
	public ArrayList<Endpoint> getIntersections(){
		return allIntersections;
	}


	// 1. Kolla om den insatta punkten sammanfaller med något element i statusen
	// 2. Spara alla lower och intersections, typ - dessa är det som ska hittas
	public void handleEventPoint(Endpoint p){ 
		//Ny check för lowers 2015-05-12. Sätt den innan uppers-checken istället. 
		//Ville att uppers skulle kollas först för att det ska upptäckas om en upper från en polygon korsar en lower från en annan.
		//Om två punkter i två polygoner sammanstrålar här så händer följande:
			/* Polygon 1:s lower upptäcks. Föregående segment tas bort.
			 * Polygon 1:s upper gör att ett nytt segment sätts in - nu ska det upptäckasatt denna upper sammanstrålar med polygon 2:s punkt.
			 * Görs detta test?
			 */
		if(p.isLower){
			System.out.println("===============================Handle a lower eventpoint=============================");
			
			int count = 0;
			//Count how many lowers we need to delete
			for(Edge e : p.getLowerTo()){
				count++;
			}
			System.out.println("p is lower to "+count+" segments.");
			
			//At some point we try to delete a lower point with an upper that has never existed.
			for(Edge e : p.getLowerTo()){//Tries to delete all segments the lower point refers to but there is only one segment left in the tree
				System.out.println("Delete the segment with upper: ("+e.getUpper().getX()+", "+e.getUpper().getRealY()+")");
				System.out.println("\nAnd lower: ("+ p.getX()+ ", " +p.getRealY() + ")");
				status.delete(e, p.getRealY()); //Delete all segments in a polygon that share p as their lower point
			}
			//WE MUST ALSO DELETE THIS SEGMENT FROM THE LOWERTO ARRAY! THIS CAUSES PROBLEMS!
			p.getLowerTo().clear();
			System.out.println(count + "Segments were deleted due to the lower endpoint of: ("+p.getX()+", "+ p.getRealY()+ ")");
		}
		
		
		//Kolla nya punktens intersections endast då nya segment ska in i statusen, p är en upper.
		if(p.isUpper()){//Även en check mot intersections? Men inga intersections ska vara satta till upper.
			System.out.println("/n================================Upper inserted===================================/n/n");
			System.out.println("p: ("+p.getX()+","+p.getRealY()+") is an upper eventpoint. \nCheck if it intersects with any existing segment in the status.");
		
			//Used to be an out commented code part here for checking if a new upper is in the interior of an existing segment.
			//That should be spotted by find new event and doIntersect...Or is it?
			
			System.out.println("Is p upper to many segments?");
			if(p.getUpperTo().size()>1){//p is upper to several segments. Check if it's an intersection. Double check in case of p being an intersection eventpoint
				//Check belongings of the polygons. Do we have an intersection?
				
				System.out.println("Yes it is. Check belongings for collision point.");
				System.out.println("isUpperTo size är: "+p.getUpperTo().size());

				for(Edge e : p.getUpperTo()){//Should work
					System.out.println("Segment with same upper: ("+e.getUpper().getX()+", "+e.getUpper().getRealY()+"). Lower: ("+e.getLower().getX()+", "+e.getLower().getRealY()+")");
					System.out.println("Insert segment into status");
					status.insert(e);//Dessa kan vara från olika polygoner. Kan kolla tillhörighet genom p.getNext om Edge blir tilldelad en tillhörighet.
					//intersectionInterior.add(e);//Varför detta?
					//How to report the edges involved? No need :)
					if(p.getBelonging() != e.getLower().getBelonging()){
						intersecting = true;//This will report this upper point as an intersection point. Don't do that again in findNewEvent below.
						System.out.println("We have a collision point.");
					}
					else System.out.println("No collisiion between this uppers segments. This case should only appear in the top point of a polygon if it is really simple :)");
				}

				//Find the leftmost and rightmost segments among the intersecting ones
				System.out.println("Hitta det vänstraste och högraste segmentet som utgår från p.");
				
				//Findleft/rightmost must be run to set left/rightmost in the Endpoint
				Edge left = p.findLeftmost();//Replaced by leftmost and rightmost inside Endpoints class
				Edge right = p.findRightmost();//Verkar funka
				//System.out.println("Leftmost is: ("+left.getLower().getX()+", "+left.getLower().getRealY()+")");
				//System.out.println("Rightmost is: ("+right.getLower().getX()+", "+right.getLower().getRealY()+")");
				//System.out.println("Now traverse the tree.");
				//status.traverseInOrder();

				//Find the left neighbour of the left segment
				//System.out.println("Hitta deras grannar.");
				Edge leftNeighbour = status.findLeftNeighbour(p.leftmost, p.getRealY());//If left neighbour exists. Check this. And the same for right.
				
				//System.out.println("Search for rightmost. Is rightmost null?");
				//System.out.println(p.rightmost==null);
				Edge rightNeighbour = status.findRightNeihbour(p.rightmost, p.getRealY());
				//System.out.println("Leftmost: ("+left.getLower().getX()+", "+left.getLower().getRealY()+")");
				
				//System.out.println("Rightmost:" + right.getLower().getX()+", "+right.getLower().getRealY()+")");

				//Kör findNewEvent på dessa
				//System.out.println("Kör findNewEvent på dessa.");
				findNewEvent(leftNeighbour, rightNeighbour, p, false);
				//findNewEvent(rightNeighbour, right, p, false);
			}
			else {
				//This is an upper point to just one segment
				System.out.println("No. Insert its only segment into the status.");
				System.out.println("Is its only segment null?");
				System.out.println(p.getUpperTo().get(0) == null);
				status.insert(p.getUpperTo().get(0));//p is only upper to one segment
				
				
				System.out.println("\n=====================================Traverse the status=============================\n");
				status.traverseInOrder();

				//System.out.println("The eventpoint is not intersecting with any segment in the status. Den är false :)");
				//Find left and right neighbours of p
				System.out.println("Find the neighbours of p:s segment to see if they intersect.");
				Edge leftNeighbour = status.findLeftNeighbour(p.getUpperTo().get(0), p.getRealY());//Hittar ingen vänstergranne :(
				Edge rightNeighbour = status.findRightNeihbour(p.getUpperTo().get(0), p.getRealY());
				System.out.println("Is there a left neighbour?");
				System.out.println(leftNeighbour);
				System.out.println("Is there a right neighbour?");
				System.out.println(rightNeighbour);

				//Throw them as arguments togehter with p to findNewEvent
				findNewEvent(leftNeighbour, rightNeighbour, p, false);//Detta är fel! Ska kolla leftneighbour mot segmentet och rightneighbour mot segmentet.
				//findNewEvent(p.getUpperTo().get(0), rightNeighbour, p, false);//Fixat med ett till kall.
			}


			//Fix newEvent

		}

		if(p.isIntersection){
			
			System.out.println("=====================This is an intersection eventpoint====================\n");
				
			intersecting = true;
			handleIntersectingSegments(p);
			
			//Don't think this is needed. Is it bad??
			p.isUpper = true;//Tvivelaktigt om deta behövs. Kan vara bra för insertion

			//findNewEvent must be run to set the leftmost and rightmost within the Edge object
			Edge left = p.findLeftmost();
			Edge right = p.findRightmost();

			Edge leftNeighbour = status.findLeftNeighbour(p.leftmost, p.getRealY());
			Edge rightNeighbour = status.findRightNeihbour(p.rightmost, p.getRealY());//Istället för right... Gör nog ingen skillnad.

			findNewEvent(leftNeighbour, rightNeighbour, p, false);
		}
		
		
		if(intersecting == true){//Feltänk här. Måste bygga på antal element som upper är upper till.
			System.out.println("p är en intersection point, är nu upper till mer än ett segment. Lägg till p i intersection-arrayen.");
			allIntersections.add(p);//This might already be added in findNewEvent!!!
			intersecting = false;
		}

		
		System.out.println("\n====================================Slut på handleEventPoint.==========================================");
	}
	
	
	/**
	 * Performs a cutting of the parts of the segments that lie above p
	 * Deletes the old segments and insert the new shorter ones into the status. This reorders them in the status tree.
	 * @param p An intersection point between two(?) segments 
	 */
	private void handleIntersectingSegments(Endpoint p){
		//1. Get the segments that intersect at point p
		Edge tempSeg1 = p.getUpperTo().get(0);
		Edge tempSeg2 = p.getUpperTo().get(1);
		
		//2. Delete them from the status
		status.delete(tempSeg1, p.getRealY());
		status.delete(tempSeg2, p.getRealY());
		
		//3. Remove the references to them at their lower points
		Endpoint tempLower = tempSeg1.getLower();
		int index = -1;
		for(Edge segment : tempLower.getLowerTo()){
			if(segment.compareTo(tempSeg1)==0){
				index = tempLower.getLowerTo().indexOf(segment);
			}
		}
		if(index != -1){
			tempLower.getLowerTo().remove(index);
		}
		tempLower = tempSeg2.getLower();
		index = -1;
		for(Edge segment : tempLower.getLowerTo()){
			if(segment.compareTo(tempSeg2)==0){
				index = tempLower.getLowerTo().indexOf(segment);
			}
		}
		if(index != -1){
			tempLower.getLowerTo().remove(index);
		}
		
		//4. Make the Edge objects point their upper to point p, the intersection
		tempSeg1.changeUpper(p);
		tempSeg2.changeUpper(p);
		
		//5. Point p to be upper to the new shorter segments. Do we need to do something with start and end points in the Edge object?
		p.clearSegmentsInUpperTo();
		p.addUpperTo(tempSeg1);//This should be done in the changeUpper of the segment
		p.addUpperTo(tempSeg2);
		
		//6. Add the shortened segments to the lower points isLowerTo-arrays
		tempSeg1.getLower().setLowerTo(tempSeg1);
		tempSeg2.getLower().setLowerTo(tempSeg2);
	
		//7. Insert the new modified segments into the status again
		status.insert(tempSeg1);
		status.insert(tempSeg2);
		
		//Print the changes to the intersecting segments
		System.out.println("======Printar data om de nya beskurna segmenten=====");
		System.out.println("Beskuret 1: ("+tempSeg1.getUpper().getX()+", "+tempSeg1.getUpper().getRealY()+"), ("+tempSeg1.getLower().getX()+", "+tempSeg1.getLower().getRealY()+")");
		System.out.println("Beskuret 2: ("+tempSeg2.getUpper().getX()+", "+tempSeg2.getUpper().getRealY()+"), ("+tempSeg2.getLower().getX()+", "+tempSeg2.getLower().getRealY()+")");
		
		System.out.println("-------------------------------------------------------------------------------");
		System.out.println("Check also if the new cut segments lower to refer back to the cut segments: ");
		for(Edge segment : tempSeg1.getLower().getLowerTo()){
			System.out.println("Segment 1 has a lower point that is lower to the segment with upper: (" + segment.getUpper().getX()+", " + segment.getUpper().getY()+")\nAnd lower: ("+segment.getLower().getX()+", "+segment.getLower().getY()+")");
		}
		
		for(Edge segment : tempSeg2.getLower().getLowerTo()){
			System.out.println("Segment 2 has a lower point that is lower to the segment with upper: (" + segment.getUpper().getX()+", " + segment.getUpper().getY()+")\nAnd lower: ("+segment.getLower().getX()+", "+segment.getLower().getY()+")");
		}
		
		System.out.println("Beskuret 2: ("+tempSeg2.getUpper().getX()+", "+tempSeg2.getUpper().getRealY()+"), ("+tempSeg2.getLower().getX()+", "+tempSeg2.getLower().getRealY()+")");
		
		
		System.out.println("Gå igenom statusträdet.");
		status.traverseInOrder();
	}

	/*
	 * Egentligen ska denna ta en leftneighbour och en right neighbour samt p som jämför left och right med sitt segment.
	 * Om p är upper till massa segment --> gör check för leftmost och rightmst här?
	 */

	public void findNewEvent(Edge leftNeighbour, Edge rightNeighbour, Endpoint p, boolean lower){//Borde köra point här istället så kan man kolla o den ska leta upp leftmost och rightmost.
		Endpoint crossing;
		if(!lower){//Do a check here if we are handling a lower or an upper.... What if it's both? Good question. //This is never used

			//Check if left neighbour is null
			if(leftNeighbour==null)
				System.out.println("There is no left neighbour.");

			//Check if the segment cross its left neighbour
			else{
				if(p.getUpperTo().size()>1){

					//Check left segment againts left neighbour
					crossing = p.leftmost.doIntersect(leftNeighbour);
					if(crossing == null){
						System.out.println("The left segment doesn't intersect with its left neighbour.");
					}
					//Check so the crossing is not in the same lower.
					else if(!(leftNeighbour.getLower().compareTo(p.leftmost.getLower())==0)){ //if(crossing.compareTo(left.getUpper())!=0 && crossing.compareTo(p.leftmost.getUpper())!=0){//To avoid a loop where the intersection will discover itself again and again.
						
						//The segments intersect, create a new eventpoint if they belong to different polygons
						if(leftNeighbour.getLower().getBelonging() != p.leftmost.getLower().getBelonging()){
							System.out.println("The left segment cross its left neighbour, create new event point.");
							System.out.println("They intersect at: ("+crossing.getX()+", "+crossing.getRealY()+")");
							Endpoint intersection = new Endpoint(crossing.getX(), crossing.getY());
							intersection.isIntersection = true;
							intersection.setBelonging(p.getBelonging());

							//Send the involved segments with the intersection
							intersection.getUpperTo().add(leftNeighbour);
							intersection.getUpperTo().add(p.leftmost);
							eventQueue.insert(intersection);
							//allIntersections.add(intersection);//Maybe not needed here. This is doubled in the last statement in handleEventPoitn. Doesn't matter.
						}		
					}
					else System.out.println("The left segment intersect with its left neighbour in both their lower points");
				}
				else if(p.getUpperTo().size()==1){
					//Check the only segment against its left neighbour
					crossing = p.getUpperTo().get(0).doIntersect(leftNeighbour);
					if(crossing == null){
						System.out.println("The segment doesn't intersect with its left neighbour.");
					}
					//Check that the crossing isn't a crossing between two lowers.
					else if(p.getUpperTo().get(0).getLower().compareTo(leftNeighbour.getLower())!=0 && p.getBelonging() != leftNeighbour.getLower().getBelonging()){//This should be ok. Only 1 element in isUpperTo --> this is not sprung from an intersection point
						System.out.println("The segment cross its left neighbour, create new event point.");
						//The segments intersect, create a new eventpoint
						
						//Check if the line ends on its neighbour or totally cross it. If it ends on the neighbour, just create
						//a new upper would suffice, instead of an intersection. No swapping necessary.
						if(p.getUpperTo().get(0).getLower() == crossing){
							//Create a new upper. Set isUpperTo till en mindre version av det gamla. Borde funka.
							
							//Har inte gjort något med denna. Bara speciella fall. Kanske inte ens behövs.
						}
						
						Endpoint intersection = new Endpoint(crossing.getX(), crossing.getY());
						//intersection.isUpper = true;
						intersection.isIntersection = true;
						intersection.setBelonging(p.getBelonging());//Kanske är detta fel?

						//Send the involved segments with the intersection
						intersection.getUpperTo().add(leftNeighbour);
						intersection.getUpperTo().add(p.getUpperTo().get(0));
						eventQueue.insert(intersection);
						//Also set p to isUpper?? Annars gör om alla checkar att kolla om UpperTo-arrayen är tom eller inte.
						
					}
					
					
					else if(p.getUpperTo().get(0).getLower().compareTo(leftNeighbour.getLower())!=0 && p.getBelonging() == leftNeighbour.getLower().getBelonging()){
						System.out.println("Jaja segmentet korsar sin vänstra granne men de tillhör samma polygon.");
						System.out.println("Den vänstra grannen är segmentet: ("+leftNeighbour.getUpper().getX()+", "+leftNeighbour.getUpper().getRealY()+"), ("+leftNeighbour.getLower().getX()+", "+leftNeighbour.getLower().getRealY()+")");
					}
					
					else System.out.println("The segment intersect with its left neighbour in both their lower points. Do something about this special case if needed.");

				}
			}

			//Check if right neighbour is null
			if(rightNeighbour==null)
				System.out.println("There is no right neighbour.");

			//Check if the segment cross its right neighbour
			else{
				if(p.getUpperTo().size()>1){

					//Check right segment againts right neighbour
					crossing = p.rightmost.doIntersect(rightNeighbour);
					if(crossing == null){
						System.out.println("The right segment doesn't intersect with its right neighbour.");
					}
					//Check that crossing isn't a crossing between two lowers and that they belong to different polygons
					else if(p.rightmost.getLower().compareTo(rightNeighbour.getLower())!=0 && p.rightmost.getLower().getBelonging() != rightNeighbour.getLower().getBelonging()){// if(crossing.compareTo(right.getUpper())==0 && crossing.compareTo(p.rightmost.getUpper())!=0){
						System.out.println("The right segment cross its right neighbour, create new event point.");
						System.out.println("They intersect at: ("+crossing.getX()+", "+crossing.getRealY()+")");
						//The segments intersect, create a new eventpoint
						Endpoint intersection = new Endpoint(crossing.getX(), crossing.getY());
						//intersection.isUpper = true;
						intersection.isIntersection = true;
						intersection.setBelonging(p.getBelonging());

						//Send the involved segments with the intersection
						intersection.getUpperTo().add(rightNeighbour);
						intersection.getUpperTo().add(p.rightmost);
						eventQueue.insert(intersection);
					}
					else System.out.println("The right segment intersect with its right neighbour in both their lower points.");
				}
				else if(p.getUpperTo().size()==1){
					//Check the only segment against its right neighbour
					crossing = p.getUpperTo().get(0).doIntersect(rightNeighbour);
					if(crossing == null){
						System.out.println("The segment doesn't intersect with its right neighbour.");
					}
					else if(p.getUpperTo().get(0).getLower().compareTo(rightNeighbour.getLower())!=0 && p.getBelonging() != rightNeighbour.getLower().getBelonging()){//Index out of bounds exception! Crossing har inget i sin array??
						System.out.println("The segment cross its right neighbour, create new event point.");
						//The segments intersect, create a new eventpoint
						Endpoint intersection = new Endpoint(crossing.getX(), crossing.getY());
						//intersection.isUpper = true;
						intersection.isIntersection = true;
						intersection.setBelonging(p.getBelonging());

						//Send the involved segments with the intersection
						intersection.getUpperTo().add(rightNeighbour);
						intersection.getUpperTo().add(p.getUpperTo().get(0));
						eventQueue.insert(intersection);
					}
					else System.out.println("The segment intersect with its right neighbour in both their lower points.");
				}
			}
		}
		if(lower){ //This code is never run I think as of 2015-05-12
			//This code shouldn't be run when we deal with closed polygons. There will always be an upper directly after the lower.
			
			
			if(leftNeighbour!=null && rightNeighbour !=null &&! p.isUpper){//Added a check against upper coinciding with lower. Then should not check the neighbours, already done against the uppers segment(s).
				//Check left and right neighbours against eachother
				crossing = leftNeighbour.doIntersect(rightNeighbour);
				if(crossing==null){
					System.out.println("A lower endpoint should now have been deleted. It's two neighbours doesn't intersect.");
				}
				else if(leftNeighbour.getLower().compareTo(rightNeighbour.getLower())!=0){//A check here against lower being the same as an intersection? No. Should be caught in the first findIntersectingSegments. I guess. This executes the lowers segment. I think.
					System.out.println("A lower endpoint has probably been deleted. It's neighbours intersect.");
					Endpoint intersection = new Endpoint(crossing.getX(), crossing.getY());
					//intersection.isUpper = true;
					intersection.isIntersection = true;
					intersection.setBelonging(p.getBelonging());

					//Send the involved segments with the intersection
					p.getUpperTo().add(leftNeighbour);
					p.getUpperTo().add(rightNeighbour);
					eventQueue.insert(intersection);
				}
				else System.out.println("The lowers neighbours cross and their lower points coincide. No need for a new intersection point.");
			}
			else{
				System.out.println("A lower endpoint has probably been deleted. At least one of its neighbours is null. No new intersections can be found here.");
			}
		}
	}
	/*
		crossing = segment.doIntersect(left);
		if(crossing == null){
			System.out.println("The segment doesn't cross with its left neighbour.");
		}
		else{
			System.out.println("The segment cross its left neighbour, create new event point.");
			//The segments intersect, create a new eventpoint
			Endpoint intersection = new Endpoint(crossing.getX(), crossing.getRealY());
			intersection.isUpper = true;
			intersection.setBelonging(left.getLower().getBelonging());
		}

		crossing = segment.doIntersect(right);
		if(crossing == null){
			System.out.println("The segment doesn't cross with its right neighbour.");
		}




		System.out.println("Inne i findNewEvent. Är grannen null?");
		if(left!=null&&right!=null){//Antar att ett av segmenten inte är null och det andra är en potentiell granne eller null.
			System.out.println("Nope, inget av de båda segmenten är null. Kolla dem för kollission.");
			//Calculate
			Endpoint crossing = left.doIntersect(right);
			System.out.println("Korsar segmenten?");
			if(crossing == null){
				//The egments doesn't intersect
				System.out.println("Nope. The neighbours doesn't intersect.");
			}
			else{
				System.out.println("Yes, det gör de! Skapa en ny eventpoint som heter intersection. Den blir en upper utan segment.\nDen kommer få segment sedan då den kommer in som upper och ligger på intersection-->beskär segmenten med sig själv som upper.");
				//The segments intersect, create a new eventpoint
				Endpoint intersection = new Endpoint(crossing.getX(), crossing.getRealY());
				intersection.isUpper = true;
				intersection.setBelonging(left.getLower().getBelonging());
				//Behöver inte lägga till segment i isUpperTo - det fixas när den behandlas som upper med interior intersection i handleEventPoint.
				//Denna hamnar i eventQueue som segmentlös upper
				//Sedan som upper i handleEventpoint
				//statusen söks igenom --> left och right hittas som interior intersections
				//Left och right skärs av och läggs till intersections egna array isUpperTo
				//intersection behöver en belonging. Bara välj en så jämförs de sedan.
				//Rapportera inte intersection här, då blir det dubbelt.
			}
		}
		else{
			System.out.println("There is no neighbour says findNewEvent");
		}

		//If the edges intersect below the sweep line, or on it and to the right of the current event point, add as an event in eventQueue
	}

	 */
	
	//Test för att se om allt funkar.
	private void handleLastPoint(Endpoint p){
		boolean intersection = false;
		if(p.isUpper){
			System.out.println("Sista eventpointen är en upper. Något är fel.");
		}
		if(p.isLower){
			System.out.println("Sista eventpointen är en lower, precis som det ska vara.");
			ArrayList<Edge> segments = new ArrayList<Edge>();
			status.deleteWithLower(p, segments);
			if(segments.size()>1){
				for(int i = 1;i<segments.size();i++){
					if(segments.get(i).getUpper().getBelonging()!=segments.get(i-1).getUpper().getBelonging()){
						intersection = true;
					}
				}
			}
		}
	}


	public int getSweepY(){
		return sweep_y;
	}
	
	public static int incrementAndGetEdgeID(){
		edgeID++;
		return edgeID;
	}
}
