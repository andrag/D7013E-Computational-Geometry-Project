package datastructures;

import algorithm.Edge;
import algorithm.Endpoint;

public class Main {
	
	private static StatusTree testStatus;

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		testStatus = new StatusTree();
		
		//generateInput();
		testPointSideOfLine();
	}
	
	
	private static void generateInput(){
		
		/* 1. Make all segments involved
		 * 2. Make all points too. Set everything right. No. Focus on the segments.
		 * 3. Insert them.
		 * 4. Traverse the tree and see that it is right.
		 * 5. Add the segment that makes it unbalanced.
		 * 6. Traverse
		 */
		
		/*
		 * 	Upper x: 53Upper y: 270Lower x: 107Lower y: 133height 0 parent Parent upper: (123, 277) and parent lower: (58, 190) | Is this a left child?true
			Upper x: 123Upper y: 277Lower x: 58Lower y: 190height 2 parent NULL | Is this a left child?false
			Upper x: 179Upper y: 224Lower x: 193Lower y: 192height 0 parent Parent upper: (253, 231) and parent lower: (240, 129) | Is this a left child?true
			Upper x: 253Upper y: 231Lower x: 240Lower y: 129height 1 parent Parent upper: (123, 277) and parent lower: (58, 190) | Is this a left child?false
			Upper x: 332Upper y: 292Lower x: 344Lower y: 141height 0 parent Parent upper: (253, 231) and parent lower: (240, 129) | Is this a left child?false
		 */
		
		//Test input 2016-03-31
		//Segment a
		/*Endpoint a1 = new Endpoint(123, 400-277);
		Endpoint a2 = new Endpoint(58, 400-190);
		Edge a = new Edge(a1, a2);
		
		//Segment b
		Endpoint b1 = new Endpoint(53, 400-270);
		Endpoint b2 = new Endpoint(107, 400-133);
		Edge b = new Edge(b1, b2);
		
		//Segment c
		Endpoint c1 = new Endpoint(253, 400-231);
		Endpoint c2 = new Endpoint(240, 400-129);
		Edge c = new Edge(c1, c2);
		
		//Segment d
		Endpoint d1 = new Endpoint(179, 400-224);
		Endpoint d2 = new Endpoint(193, 400-192);
		Edge d = new Edge(d1, d2);
		
		//Segment e
		Endpoint e1 = new Endpoint(332, 400-292);
		Endpoint e2 = new Endpoint(344, 400-141);
		Edge e = new Edge(e1, e2);
		
		//Segment f
		Endpoint f1 = new Endpoint(148, 400-220);
		Endpoint f2 = new Endpoint(172, 400-136);
		Edge f = new Edge(f1, f2);
		
		testStatus.insert(a);
		testStatus.insert(b);
		testStatus.insert(c);
		testStatus.insert(d);
		testStatus.insert(e);
		
		System.out.println("The status tree now looks like this: ");
		
		testStatus.traverseInOrder();
		
		System.out.println("Insert the last segment and print the tree: ");
		testStatus.insert(f);
		
		testStatus.traverseInOrder();*/
		
		
		//Test input 2016-04-01: Trying to get deletion of a vertical segment (Segment a) at the root to work
		//Segment a
				Endpoint a1 = new Endpoint(243, 400-193);
				Endpoint a2 = new Endpoint(243, 400-116);
				Edge a = new Edge(a1, a2);
				
				//Segment b
				Endpoint b1 = new Endpoint(157, 400-144);
				Endpoint b2 = new Endpoint(146, 400-66);
				Edge b = new Edge(b1, b2);
				
				//Segment c
				Endpoint c1 = new Endpoint(356, 400-279);
				Endpoint c2 = new Endpoint(340, 400-115);
				Edge c = new Edge(c1, c2);
				
				//Segment d
				Endpoint d1 = new Endpoint(62, 400-156);
				Endpoint d2 = new Endpoint(55, 400-84);
				Edge d = new Edge(d1, d2);
		
				testStatus.insert(a);
				testStatus.insert(b);
				testStatus.insert(c);
				testStatus.insert(d);
				
				testStatus.traverseInOrder();
				
				System.out.println("=========Now delete the root========");
				boolean hej = testStatus.delete(a, a2.getRealY());
				System.out.println("Did deletion return null?");
				System.out.println(hej == false);
				
				System.out.println("Traverse the tree again.");
				
				testStatus.traverseInOrder();
		
		
	}
	
	//This method returns 0 for the specified segments.
	public static void testPointSideOfLine(){
		Endpoint one = new Endpoint(148, 400 - 298);
		Endpoint two = new Endpoint(49, 400 - 255);
		Edge testSegment1 = new Edge(one, two);
		
		Endpoint three = new Endpoint(124, 400 - 214);
		Edge testSegment2 = new Edge(one, three);
		
		//Test common upper - 1 horizontal stretching left from upper == the upper is not the same for both segments. This case will not appear since the egments cannot be in the status at the same time.
		Endpoint four = new Endpoint(130, 400 - 298);//This points left from the "upper" -> therefore the upper is this segments lower.
		Edge horizontalLeft = new Edge(one, four);
		
		//Test 1 horizontal segment stretching right from common upper
		Endpoint five = new Endpoint(160, 400 - 298);
		Edge horizontalRight = new Edge(one, five);
		
		//System.out.println(testNewSideMethod(testSegment2, testSegment1.getLower()));//CHECK
		//System.out.println(testNewSideMethod(testSegment1, testSegment2.getLower()));//CHECK
		
		//System.out.println(isToRightOrLeftOf(testSegment2, testSegment1.getLower()));//CHECK
		//System.out.println(isToRightOrLeftOf(testSegment1, testSegment2.getLower()));//CHECK
		
		//Horizontal case
		//System.out.println(testNewSideMethod(testSegment1, horizontalRight.getLower()));//Should return 1 (CHECK)
		//System.out.println(isToRightOrLeftOf(testSegment1, horizontalRight.getLower()));//Should return 1 (CHECK)
		//System.out.println(testNewSideMethod(horizontalRight, testSegment1.getLower()));//Points underneath a horizontal line returns -1.
		//System.out.println(isToRightOrLeftOf(horizontalRight, testSegment1.getLower()));
		
		//Testing a point underneath a horizontal line and in the middle of its x-interval
		Endpoint testPoint1 = new Endpoint(155, 400 - 250);
		//System.out.println(testNewSideMethod(horizontalRight, testPoint1));//Returns -1
		//System.out.println(isToRightOrLeftOf(horizontalRight, testPoint1));//Returns -1
		
		//Testing a point underneath a horizontal line and in the above the max x of the segments interval
		Endpoint testPoint2 = new Endpoint(200, 400 - 250);
		System.out.println(testNewSideMethod(horizontalRight, testPoint2));//Returns -1
		System.out.println(isToRightOrLeftOf(horizontalRight, testPoint2));//Returns -1
		
		//Conclusion: A point underneath a line always return as if it is on the left, -1.
		
		/*int result = isToRightOrLeftOf(testSegment1, testSegment2);
		System.out.println(result);*/
	}
	
	//Test isToRightOrLeftOf for two segments with same upper
	public static int isToRightOrLeftOf(Edge segment, Endpoint p){
		//Determinant stuff
		//Might be bad to use int here. Resolves to 0.
		//Determinant stuff
				int det = (segment.getLower().getX()-segment.getUpper().getX())*(p.getRealY()-segment.getUpper().getRealY()) - (segment.getLower().getRealY()-segment.getUpper().getRealY())*(p.getX()-segment.getUpper().getX());
				if(det<0){
					return -1;
				}
				else if(det>0){
					return 1;
				}

				return 0;
	}
	
	//Returns 1 for right and -1 for left and 0 for point on line.
	/* Test special cases:
	 * 1. One segment is horizontal - common upper
	 * 2. One segment is horizontal and the other vertical - common upper
	 * 3. Both are horizontal - will never exist in the status at the same time (CHECK)
	 */
	public static int testNewSideMethod(Edge segment, Endpoint p){
		int Ax = segment.getUpper().getX();
		//System.out.println("Ax = "+Ax);
		int Ay = segment.getUpper().getRealY();
		//System.out.println("Ay = "+Ay);
		int Bx = segment.getLower().getX();
		//System.out.println("Bx = "+Bx);
		int By = segment.getLower().getRealY();
		//System.out.println("By = "+By);
		
		
		double doubleDet = ((double)Bx-(double)Ax)*((double)p.getRealY()-(double)Ay) - ((double)By-(double)Ay)*((double)p.getX()-(double)Ax);
		//System.out.println("doubleDet = "+doubleDet);
		int det = (Bx-Ax)*(p.getRealY()-Ay) - (By-Ay)*(p.getX()-Ax);
		
		//System.out.println("("+Bx + " - "+Ax+") * ("+p.getRealY() + " - "+Ay + ") - (" + By + " -" + Ay + ") * ("+ p.getX() + " - " + Ax);
		
		//System.out.println("det = " + det);
		
		
		
		if(det==0){
			return 0;
		}
		if(det<0){
			return -1;
		}
		else return 1;
	}
	
	/* 2016-04-04
	 * Test the exception caught 2016-04-01. 
	 * 
	 * Chain of events
	 * 1. The status tree was balanced.
	 * 2. Two segments with same upper was inserted.
	 * 3. Trying to find the leftNeighbour of the leftmost of the new segments caused a crash -> a.	sweep_y lies outside the segments endpoints.
	 * 4. Possible causes:
	 * 			1. The leftmost segment at the upper points getUpperTo-array is null
	 * 			2. The findLeftNeighbour method fails somewhere -> track back from the: a.	sweep_y lies outside the segments endpoints.
	 * 
	 * 
	 */
	
	public static void test1(){
		//Root segment
		Endpoint root1 = new Endpoint(177, 400-312);
		Endpoint root2 = new Endpoint(211, 400-254);
		Edge root = new Edge(root1, root2);
		
		//Root.left
		Endpoint b1 = new Endpoint(99, 400-303);
		Endpoint b2 = new Endpoint(94, 400-290);
		Edge b = new Edge(b1, b2);
		
		//Root.right
		Endpoint c1 = new Endpoint(207, 400-322);
		Endpoint c2 = new Endpoint(285, 400-222);
		Edge c = new Edge(c1, c2);
		
		//Root.left.left
		Endpoint d1 = new Endpoint(88, 400-324);
		Endpoint d2 = new Endpoint(22, 400-280);
		Edge d = new Edge(d1, d2);
		
		//Root.left.right
		Endpoint e1 = new Endpoint(153, 400-320);
		Endpoint e2 = new Endpoint(126, 400-251);
		Edge e = new Edge(e1, e2);
		
		//Root.right.left
		Endpoint f1 = new Endpoint(200, 400-304);
		Endpoint f2 = new Endpoint(191, 400-199);
		Edge f = new Edge(f1, f2);
		
		//Root.right.right
		Endpoint g1 = new Endpoint(230, 400-335);
		Endpoint g2 = new Endpoint(328, 400-257);
		Edge g = new Edge(g1, g2);
		
		//Root.left.left.right
		Endpoint h1 = new Endpoint(99, 400-303);
		Endpoint h2 = new Endpoint(57, 400-237);
		Edge h = new Edge(h1, h2);
		
		//Root.left.right.right
		Endpoint i1 = new Endpoint(177, 400-312);
		Endpoint i2 = new Endpoint(106, 400-307);
		Edge i = new Edge(i1, i2);
		
		
		testStatus.insert(root);
		testStatus.insert(b);
		testStatus.insert(c);
		testStatus.insert(d);
		testStatus.insert(e);
		testStatus.insert(f);
		testStatus.insert(g);
		testStatus.insert(h);
		testStatus.insert(i);
		
		testStatus.traverseInOrder();
		
	}
	
	
	

}
